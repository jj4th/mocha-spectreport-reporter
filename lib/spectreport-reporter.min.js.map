{"version":3,"sources":["spectreport-reporter.min.js","spectreport-reporter.js","src/util.js","src/index.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_step","_arr","_iterator","next","done","push","value","length","TypeError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","__proto__","_classCallCheck","instance","Constructor","global","factory","exports","module","require","define","amd","spectreportReporter","Spectreport","this","screenshot","test","dir","filename","parent","title","replace","screenshotPath","browser","takeScreenshot","then","png","stream","util__fs","createOuputStream","write","Buffer","end","splitPath","haystack","search","searchPath","path","resolve","relative","fullPath","dirname","basename","index__fs","mocha","Spec","reporters","Base","Suite","Test","defaults","screenshotDir","outputDir","storyDir","SpectReporter","_Base","runner","options","opts","reporterOptions","storyPath","undefined","outputPath","outputFilename","curSuite","console","call","on","suite","file","suites","_ref","_ref2","start","stop","_parent","addSuite","addTest","TEST_PENDING","TEST_PASS","err","TEST_FAIL","hasTests","jsonFilename","outputJsonSync","index"],"mappings":"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","file":"spectreport-reporter.min.js","sourcesContent":[null,"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('spectreport')) :\n    typeof define === 'function' && define.amd ? define(['spectreport'], factory) :\n    global.spectreportReporter = factory(global.Spectreport)\n}(this, function (Spectreport) { 'use strict';\n\n    const util__fs = require('fs-extra');\n    const path = require('path');\n\n    /**\n     * Takes a screenshot of a failed test and returns the relative path\n     * to that screenshot.  Note that this expects a browser object for protractor\n     * and naively assumes that the screenshots directory exists.\n     *\n     * @param {Object} test\n     * @return \"String\" screenshotPath\n     * @api private\n     */\n\n    function screenshot(test, dir) {\n        let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n        let screenshotPath = `${dir}/${filename}`;\n\n        /*global browser*/\n        browser.takeScreenshot().then(png => {\n            let stream = util__fs.createOuputStream(screenshotPath);\n\n            stream.write(new Buffer(png, 'base64'));\n            stream.end();\n        });\n\n        return screenshotPath;\n    }\n\n    /**\n     * For haystack underneath the search directory\n     *\n     * @param \"String\" haystack\n     * @param \"String\" search\n     * @param \"String\" replace\n     * @return \"String\",\"String\" relativePath, filename\n     * @api private\n     */\n\n    function splitPath(haystack, search, replace) {\n        var searchPath = path.resolve(search);\n        var relative = path.relative(searchPath, haystack);\n        var fullPath = path.resolve(replace, relative);\n\n        return [path.dirname(fullPath), path.basename(fullPath)];\n    }\n\n    const index__fs = require('fs-extra');\n\n    /**\n     * Module dependencies.\n     */\n    const mocha = require('mocha');\n    const Spec = mocha.reporters.Spec;\n    const Base = mocha.reporters.Base;\n\n    const Suite = Spectreport.Suite;\n    const Test = Spectreport.Test;\n\n    /**\n     * Default values\n     */\n    const defaults = {\n        screenshotDir: 'test/screenshot',\n        outputDir: 'test/results',\n        storyDir: 'test/stories'\n    };\n\n    /**\n     * Initialize a new `Spec` test reporter.\n     *\n     * @param {Runner} runner\n     * @api public\n     */\n    class SpectReporter extends Base {\n        constructor(runner, options) {\n            const opts = options.reporterOptions || {};\n            let storyPath, outputPath, outputFilename;\n\n            // Handle options and setup defaults\n            opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n            opts.outputDir = opts.outputDir || defaults.outputDir;\n            opts.storyDir = opts.storyDir || defaults.storyDir;\n\n            let curSuite = null;\n\n            // Handle console output if requested, pass through to Spec reporter.\n            if (opts.console) {\n                Spec.call(this, runner);\n            } else {\n                Base.call(this, runner);\n                //runner.on('end', this.epilogue.bind(this));\n            }\n\n            // Take screenshots of failed tests if requested\n            if (opts.screenshot) {\n                runner.on('fail', test => {\n                    screenshot(test, opts.screenshotDir);\n                });\n            }\n\n            // Find the path for the output file, accomodate multi-suite sets.\n            storyPath = runner.suite.file || (runner.suite.suites[0] && runner.suite.suites[0].file);\n\n            // If there's no file, we can't continue.\n            if(!storyPath) {\n                return true;\n            }\n\n            [outputPath, outputFilename] = splitPath(storyPath, opts.storyDir, opts.outputDir);\n\n            // Handle JSON output\n\n            runner.on('suite', suite => {\n                // In the case of protractor, skip the blank titled root suite.\n                if (suite.title === '' && suite.suites.length === 1) {\n                    return false;\n                }\n                curSuite = new Suite(suite, curSuite);\n                curSuite.start();\n            });\n\n            runner.on('suite end', () => {\n                curSuite.stop();\n\n                if (curSuite.parent) {\n                    let parent = curSuite.parent;\n                    parent.addSuite(curSuite);\n                    curSuite = parent;\n                }\n            });\n\n            runner.on('pending', test => {\n                curSuite.addTest(new Test(test, Test.TEST_PENDING));\n            });\n\n            runner.on('pass', test => {\n                curSuite.addTest(new Test(test, Test.TEST_PASS));\n            });\n\n            runner.on('fail', (test, err) => {\n                curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n            });\n\n            runner.on('end', () => {\n                if(curSuite && curSuite.hasTests()) {\n                    curSuite.stop(); // End the current suite again.\n\n                    let jsonFilename = outputFilename.replace('.js', '.json');\n                    index__fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n                }\n            });\n        }\n    }\n\n    var index = SpectReporter;\n\n    return index;\n\n}));\n","const fs = require('fs-extra');\nconst path = require('path');\n\n/**\n * Takes a screenshot of a failed test and returns the relative path\n * to that screenshot.  Note that this expects a browser object for protractor\n * and naively assumes that the screenshots directory exists.\n *\n * @param {Object} test\n * @return \"String\" screenshotPath\n * @api private\n */\n\nexport function screenshot(test, dir) {\n    let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n    let screenshotPath = `${dir}/${filename}`;\n\n    /*global browser*/\n    browser.takeScreenshot().then(png => {\n        let stream = fs.createOuputStream(screenshotPath);\n\n        stream.write(new Buffer(png, 'base64'));\n        stream.end();\n    });\n\n    return screenshotPath;\n}\n\n/**\n * For haystack underneath the search directory\n *\n * @param \"String\" haystack\n * @param \"String\" search\n * @param \"String\" replace\n * @return \"String\",\"String\" relativePath, filename\n * @api private\n */\n\nexport function splitPath(haystack, search, replace) {\n    var searchPath = path.resolve(search);\n    var relative = path.relative(searchPath, haystack);\n    var fullPath = path.resolve(replace, relative);\n\n    return [path.dirname(fullPath), path.basename(fullPath)];\n}\n","const fs = require('fs-extra');\n\n/**\n * Module dependencies.\n */\nconst mocha = require('mocha');\nconst Spec = mocha.reporters.Spec;\nconst Base = mocha.reporters.Base;\n\nimport {screenshot, splitPath} from './util';\nimport Spectreport from 'spectreport';\nconst Suite = Spectreport.Suite;\nconst Test = Spectreport.Test;\n\n/**\n * Default values\n */\nconst defaults = {\n    screenshotDir: 'test/screenshot',\n    outputDir: 'test/results',\n    storyDir: 'test/stories'\n};\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\nclass SpectReporter extends Base {\n    constructor(runner, options) {\n        const opts = options.reporterOptions || {};\n        let storyPath, outputPath, outputFilename;\n\n        // Handle options and setup defaults\n        opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n        opts.outputDir = opts.outputDir || defaults.outputDir;\n        opts.storyDir = opts.storyDir || defaults.storyDir;\n\n        let curSuite = null;\n\n        // Handle console output if requested, pass through to Spec reporter.\n        if (opts.console) {\n            Spec.call(this, runner);\n        } else {\n            Base.call(this, runner);\n            //runner.on('end', this.epilogue.bind(this));\n        }\n\n        // Take screenshots of failed tests if requested\n        if (opts.screenshot) {\n            runner.on('fail', test => {\n                screenshot(test, opts.screenshotDir);\n            });\n        }\n\n        // Find the path for the output file, accomodate multi-suite sets.\n        storyPath = runner.suite.file || (runner.suite.suites[0] && runner.suite.suites[0].file);\n\n        // If there's no file, we can't continue.\n        if(!storyPath) {\n            return true;\n        }\n\n        [outputPath, outputFilename] = splitPath(storyPath, opts.storyDir, opts.outputDir);\n\n        // Handle JSON output\n\n        runner.on('suite', suite => {\n            // In the case of protractor, skip the blank titled root suite.\n            if (suite.title === '' && suite.suites.length === 1) {\n                return false;\n            }\n            curSuite = new Suite(suite, curSuite);\n            curSuite.start();\n        });\n\n        runner.on('suite end', () => {\n            curSuite.stop();\n\n            if (curSuite.parent) {\n                let parent = curSuite.parent;\n                parent.addSuite(curSuite);\n                curSuite = parent;\n            }\n        });\n\n        runner.on('pending', test => {\n            curSuite.addTest(new Test(test, Test.TEST_PENDING));\n        });\n\n        runner.on('pass', test => {\n            curSuite.addTest(new Test(test, Test.TEST_PASS));\n        });\n\n        runner.on('fail', (test, err) => {\n            curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n        });\n\n        runner.on('end', () => {\n            if(curSuite && curSuite.hasTests()) {\n                curSuite.stop(); // End the current suite again.\n\n                let jsonFilename = outputFilename.replace('.js', '.json');\n                fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n            }\n        });\n    }\n}\n\nexport default SpectReporter;\n"],"sourceRoot":"/source/"}