{"version":3,"sources":["spectreport-reporter.min.js","spectreport-reporter.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","Array","isArray","Object","global","factory","exports","module","require","define","amd","spectreportReporter","Spectreport","this","screenshot","test","dir","filename","parent","title","replace","screenshotPath","browser","takeScreenshot","then","png","stream","_fs","createOutputStream","write","Buffer","end","splitPath","filePath","srcPath","destPath","searchPath","path","resolve","relative","fullPath","dirname","basename","fixFileField","suite","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","suites","childSuite","file","tests","fs","mocha","Spec","reporters","Base","Suite","Test","defaults","screenshotDir","outputDir","storyDir","SpectReporter","runner","options","opts","reporterOptions","outputPath","outputFilename","curSuite","console","reporter","on","pending","start","stop","_splitPath","_splitPath2","jsonFilename","outputJsonSync","_parent","addSuite","addTest","TEST_PENDING","TEST_PASS","TEST_FAIL"],"mappings":"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","file":"spectreport-reporter.min.js","sourcesContent":["var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('spectreport')) : typeof define === 'function' && define.amd ? define(['spectreport'], factory) : global.spectreportReporter = factory(global.Spectreport);\n})(this, function (Spectreport) {\n    'use strict';\n\n    Spectreport = 'default' in Spectreport ? Spectreport['default'] : Spectreport;\n\n    var _fs = require('fs-extra');\n    var path = require('path');\n\n    /**\n     * Takes a screenshot of a failed test and returns the relative path\n     * to that screenshot.  Note that this expects a browser object for protractor\n     * and naively assumes that the screenshots directory exists.\n     *\n     * @param {Object} test\n     * @return \"String\" screenshotPath\n     * @api private\n     */\n\n    function screenshot(test, dir) {\n        var filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n        var screenshotPath = dir + '/' + filename;\n\n        /*global browser*/\n        browser.takeScreenshot().then(function (png) {\n            var stream = _fs.createOutputStream(screenshotPath);\n\n            stream.write(new Buffer(png, 'base64'));\n            stream.end();\n        });\n\n        return screenshotPath;\n    }\n\n    /**\n     * For filePath underneath the srcPath directory\n     *   replace srcPath with destPath and return both the\n     *   new folder path, and the basename.\n     *\n     * @param \"String\" filePath\n     * @param \"String\" srcPath\n     * @param \"String\" destPath\n     * @return \"String\",\"String\" relativePath, filename\n     * @api private\n     */\n\n    function splitPath(filePath, srcPath, destPath) {\n        var searchPath = path.resolve(srcPath);\n        var relative = path.relative(searchPath, filePath);\n        var fullPath = path.resolve(destPath, relative);\n\n        return [path.dirname(fullPath), path.basename(fullPath)];\n    }\n\n    /**\n     * For a suite which is missing a file field, recursively\n     * propagate the field from it's child suites or tests.\n     * This modifies the suite object in place.\n     *\n     * @param \"Object\" suite\n     * @return \"Object\" suite\n     * @api private\n     */\n\n    function fixFileField(suite) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = suite.suites[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var childSuite = _step.value;\n\n                if (!childSuite.file) {\n                    fixFileField(childSuite);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator['return']) {\n                    _iterator['return']();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        if (suite.tests[0] && suite.tests[0].file) {\n            suite.file = suite.tests[0].file;\n        } else if (suite.suites[0] && suite.suites[0].file) {\n            suite.file = suite.suites[0].file;\n        }\n\n        return suite;\n    }\n\n    var fs = require('fs-extra');\n\n    /**\n     * Module dependencies.\n     */\n    var mocha = require('mocha');\n    var Spec = mocha.reporters.Spec;\n    var Base = mocha.reporters.Base;\n\n    var Suite = Spectreport.Suite;\n    var Test = Spectreport.Test;\n\n    /**\n     * Default values\n     */\n    var defaults = {\n        screenshotDir: 'test/screenshots',\n        outputDir: 'test/results',\n        storyDir: 'test/stories'\n    };\n\n    /**\n     * Initialize a new `Spec` test reporter.\n     *\n     * @param {Runner} runner\n     * @api public\n     */\n\n    var SpectReporter = function SpectReporter(runner, options) {\n        _classCallCheck(this, SpectReporter);\n\n        var opts = options.reporterOptions || {};\n        var outputPath = undefined,\n            outputFilename = undefined,\n            curSuite = null;\n\n        // Handle options and setup defaults\n        opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n        opts.outputDir = opts.outputDir || defaults.outputDir;\n        opts.storyDir = opts.storyDir || defaults.storyDir;\n\n        // Handle console output if requested, pass through to Spec reporter.\n        if (opts.console) {\n            this.reporter = new Spec(runner);\n            // Otherwise, register the default hooks on suite/test events\n        } else {\n                this.reporter = new Base(runner);\n            }\n\n        // Take screenshots of failed tests if requested\n        if (opts.screenshot) {\n            runner.on('fail', function (test) {\n                screenshot(test, opts.screenshotDir);\n            });\n        }\n\n        runner.on('suite', function (suite) {\n            // In the case of protractor, skip the blank titled root suite.\n            if (suite.title === '' && suite.suites.length === 1) {\n                return false;\n            }\n\n            // In the case of pending suites, fix the file attribute.\n            if (suite.pending && !suite.file) {\n                fixFileField(suite);\n            }\n\n            curSuite = new Suite(suite, curSuite);\n            curSuite.start();\n        });\n\n        runner.on('suite end', function () {\n            curSuite.stop();\n\n            if (curSuite.file && (!curSuite.parent || curSuite.parent.file !== curSuite.file)) {\n                var _splitPath = splitPath(curSuite.file, opts.storyDir, opts.outputDir);\n\n                var _splitPath2 = _slicedToArray(_splitPath, 2);\n\n                outputPath = _splitPath2[0];\n                outputFilename = _splitPath2[1];\n\n                var jsonFilename = outputFilename.replace('.js', '.json');\n                fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n            }\n\n            if (curSuite.parent) {\n                var _parent = curSuite.parent;\n                _parent.addSuite(curSuite);\n                curSuite = _parent;\n            }\n        });\n\n        runner.on('pending', function (test) {\n            curSuite.addTest(new Test(test, Test.TEST_PENDING));\n        });\n\n        runner.on('pass', function (test) {\n            curSuite.addTest(new Test(test, Test.TEST_PASS));\n        });\n\n        runner.on('fail', function (test, err) {\n            curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n        });\n    };\n\n    return SpectReporter;\n});","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('spectreport')) :\n    typeof define === 'function' && define.amd ? define(['spectreport'], factory) :\n    global.spectreportReporter = factory(global.Spectreport);\n}(this, function (Spectreport) { 'use strict';\n\n    Spectreport = 'default' in Spectreport ? Spectreport['default'] : Spectreport;\n\n    const _fs = require('fs-extra');\n    const path = require('path');\n\n    /**\n     * Takes a screenshot of a failed test and returns the relative path\n     * to that screenshot.  Note that this expects a browser object for protractor\n     * and naively assumes that the screenshots directory exists.\n     *\n     * @param {Object} test\n     * @return \"String\" screenshotPath\n     * @api private\n     */\n\n    function screenshot(test, dir) {\n        let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n        let screenshotPath = `${dir}/${filename}`;\n\n        /*global browser*/\n        browser.takeScreenshot().then(png => {\n            let stream = _fs.createOutputStream(screenshotPath);\n\n            stream.write(new Buffer(png, 'base64'));\n            stream.end();\n        });\n\n        return screenshotPath;\n    }\n\n    /**\n     * For filePath underneath the srcPath directory\n     *   replace srcPath with destPath and return both the\n     *   new folder path, and the basename.\n     *\n     * @param \"String\" filePath\n     * @param \"String\" srcPath\n     * @param \"String\" destPath\n     * @return \"String\",\"String\" relativePath, filename\n     * @api private\n     */\n\n    function splitPath(filePath, srcPath, destPath) {\n        var searchPath = path.resolve(srcPath);\n        var relative = path.relative(searchPath, filePath);\n        var fullPath = path.resolve(destPath, relative);\n\n        return [path.dirname(fullPath), path.basename(fullPath)];\n    }\n\n    /**\n     * For a suite which is missing a file field, recursively\n     * propagate the field from it's child suites or tests.\n     * This modifies the suite object in place.\n     *\n     * @param \"Object\" suite\n     * @return \"Object\" suite\n     * @api private\n     */\n\n    function fixFileField(suite) {\n        for (let childSuite of suite.suites) {\n            if (!childSuite.file) {\n                fixFileField(childSuite);\n            }\n        }\n        if (suite.tests[0] && suite.tests[0].file) {\n            suite.file = suite.tests[0].file;\n        } else if (suite.suites[0] && suite.suites[0].file) {\n            suite.file = suite.suites[0].file;\n        }\n\n        return suite;\n    }\n\n    const fs = require('fs-extra');\n\n    /**\n     * Module dependencies.\n     */\n    const mocha = require('mocha');\n    const Spec = mocha.reporters.Spec;\n    const Base = mocha.reporters.Base;\n\n    const Suite = Spectreport.Suite;\n    const Test = Spectreport.Test;\n\n    /**\n     * Default values\n     */\n    const defaults = {\n        screenshotDir: 'test/screenshots',\n        outputDir: 'test/results',\n        storyDir: 'test/stories'\n    };\n\n    /**\n     * Initialize a new `Spec` test reporter.\n     *\n     * @param {Runner} runner\n     * @api public\n     */\n    class SpectReporter {\n        constructor(runner, options) {\n            const opts = options.reporterOptions || {};\n            let outputPath, outputFilename, curSuite = null;\n\n            // Handle options and setup defaults\n            opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n            opts.outputDir = opts.outputDir || defaults.outputDir;\n            opts.storyDir = opts.storyDir || defaults.storyDir;\n\n            // Handle console output if requested, pass through to Spec reporter.\n            if (opts.console) {\n                this.reporter = new Spec(runner);\n            // Otherwise, register the default hooks on suite/test events\n            } else {\n                this.reporter = new Base(runner);\n            }\n\n            // Take screenshots of failed tests if requested\n            if (opts.screenshot) {\n                runner.on('fail', test => {\n                    screenshot(test, opts.screenshotDir);\n                });\n            }\n\n            runner.on('suite', suite => {\n                // In the case of protractor, skip the blank titled root suite.\n                if (suite.title === '' && suite.suites.length === 1) {\n                    return false;\n                }\n\n                // In the case of pending suites, fix the file attribute.\n                if (suite.pending && !suite.file) {\n                    fixFileField(suite);\n                }\n\n                curSuite = new Suite(suite, curSuite);\n                curSuite.start();\n            });\n\n            runner.on('suite end', () => {\n                curSuite.stop();\n\n                if(curSuite.file && (!curSuite.parent || curSuite.parent.file !== curSuite.file)) {\n                    [outputPath, outputFilename] = splitPath(curSuite.file, opts.storyDir, opts.outputDir);\n                    let jsonFilename = outputFilename.replace('.js', '.json');\n                    fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n                }\n\n                if (curSuite.parent) {\n                    let parent = curSuite.parent;\n                    parent.addSuite(curSuite);\n                    curSuite = parent;\n                }\n            });\n\n            runner.on('pending', test => {\n                curSuite.addTest(new Test(test, Test.TEST_PENDING));\n            });\n\n            runner.on('pass', test => {\n                curSuite.addTest(new Test(test, Test.TEST_PASS));\n            });\n\n            runner.on('fail', (test, err) => {\n                curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n            });\n        }\n    }\n\n    return SpectReporter;\n\n}));"],"sourceRoot":"/source/"}