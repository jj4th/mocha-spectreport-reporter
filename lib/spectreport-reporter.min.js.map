{"version":3,"sources":["spectreport-reporter.min.js","spectreport-reporter.js","src/util.js","src/index.js","src/classes/stats.js","src/classes/test.js","src/classes/suite.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_step","_arr","_iterator","next","done","push","value","length","TypeError","_createClass","defineProperties","target","props","key","prop","configurable","writable","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","global","factory","exports","module","define","amd","spectreportReporter","this","screenshot","test","dir","filename","parent","title","replace","screenshotPath","browser","takeScreenshot","then","png","stream","util__fs","createWriteStream","write","Buffer","end","splitPath","haystack","search","relative","split","tokens","pop","path","join","Spec","runner","options","opts","reporterOptions","screenshotDir","defaults","outputDir","storyDir","curSuite","storyPath","suite","file","_splitPath","_splitPath2","outputPath","outputFilename","console","specReporter","on","classes_suite","start","stop","addSuite","addTest","classes_test","TEST_PENDING","TEST_PASS","err","TEST_FAIL","jsonFilename","index__fs","JSON","stringify","require","Stats","tests","undefined","arguments","pending","failures","duration","timeStart","timeStop","add","stats","classes_stats","Test","status","_this","fullTitle","Math","round","error","getOwnPropertyNames","forEach","Suite","suites","addStats","hasTests","Date","now","toJSON","clone","assign","reporters","index"],"mappings":"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","file":"spectreport-reporter.min.js","sourcesContent":[null,"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.spectreportReporter = factory()\n}(this, function () { 'use strict';\n\n    const util__fs = require('fs-extra');\n\n    /**\n     * Takes a screenshot of a failed test and returns the relative path\n     * to that screenshot.  Note that this expects a browser object for protractor\n     * and naively assumes that the screenshots directory exists.\n     *\n     * @param {Object} test\n     * @return \"String\" screenshotPath\n     * @api private\n     */\n\n    function screenshot(test, dir) {\n        let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n        let screenshotPath = `${dir}/${filename}`;\n\n        /*global browser*/\n        browser.takeScreenshot().then(png => {\n            let stream = util__fs.createWriteStream(screenshotPath);\n\n            stream.write(new Buffer(png, 'base64'));\n            stream.end();\n        });\n\n        return screenshotPath;\n    }\n\n    /**\n     * Starting from haystack in the path, clear everything up to and including\n     * the search string, then prepend the replace string, and return a path and\n     * a filename\n     *\n     * @param \"String\" haystack\n     * @param \"String\" search\n     * @param \"String\" replace\n     * @return \"String\",\"String\" relativePath, filename\n     * @api private\n     */\n\n    function splitPath(haystack, search, replace) {\n        let relative = replace + haystack.split(search)[1];\n        let tokens = relative.split('/');\n        let filename = tokens.pop();\n        let path = tokens.join('/');\n\n        return [path, filename];\n    }\n\n    class Stats {\n        constructor(tests = 0, pending = 0, failures = 0, duration = 0) {\n            this.tests = tests;\n            this.pending = pending;\n            this.failures = failures;\n            this.duration = duration;\n            this.timeStart = null;\n            this.timeStop = null;\n        }\n        add(stats) {\n            this.tests += stats.tests;\n            this.pending += stats.pending;\n            this.failures += stats.failures;\n        }\n    }\n\n    var classes_stats = Stats;\n\n    class Test {\n        constructor(test, status, err) {\n            this.status = status;\n            this.title = test.title;\n            this.fullTitle = test.fullTitle();\n            this.duration = Math.round(test.duration / 10) / 100;\n            this.error = null;\n\n            if(err) {\n                this.error = {};\n                Object.getOwnPropertyNames(err).forEach(key => {\n                    this.error[key] = err[key];\n                });\n            }\n        };\n    }\n\n    Test.TEST_PENDING = 2;\n    Test.TEST_PASS = 1;\n    Test.TEST_FAIL = 0;\n\n    var classes_test = Test;\n\n    class Suite {\n        constructor(suite, parent) {\n            this.title = suite.title;\n            this.suites = [];\n            this.tests = [];\n            this.parent = parent;\n            this.stats = new classes_stats();\n        }\n        addStats(stats) {\n            this.stats.add(stats);\n        }\n        addSuite(suite) {\n            if (!suite.hasTests()) {\n                return false;\n            }\n            this.suites.push(suite);\n            this.addStats(suite.stats);\n        }\n        addTest(test) {\n            this.tests.push(test);\n            this.stats.tests++;\n\n            if (test.status === classes_test.TEST_PENDING) {\n                this.stats.pending++;\n            }\n            else if (test.status === classes_test.TEST_FAIL) {\n                this.stats.failures++;\n            }\n        }\n        hasTests() {\n            return (this.tests.length > 0);\n        }\n        start () {\n            this.stats.timeStart = Date.now();\n        }\n        stop () {\n            if(!this.stats.timeStart > 0) {\n                return false;\n            }\n            this.stats.timeStop = Date.now();\n            this.stats.duration = Math.round((this.stats.timeStop - this.stats.timeStart) / 10) / 100;\n        }\n        toJSON() {\n            var clone = Object.assign({}, this);\n            clone.parent = undefined;\n            return clone;\n        }\n    }\n\n    var classes_suite = Suite;\n\n    const index__fs = require('fs-extra');\n\n    /**\n     * Module dependencies.\n     */\n    const specReporter = require('mocha').reporters.Spec;\n\n    const defaults = {\n        screenshotDir: 'test/screenshot',\n        outputDir: 'test/output',\n        storyDir: 'test/stories'\n    };\n\n    /**\n     * Initialize a new `Spec` test reporter.\n     *\n     * @param {Runner} runner\n     * @api public\n     */\n    function Spec(runner, options) {\n        const opts = options.reporterOptions || {};\n\n        // Handle options and setup defaults\n        opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n        opts.outputDir = opts.outputDir || defaults.outputDir;\n        opts.storyDir = opts.storyDir || defaults.storyDir;\n\n        let curSuite = null;\n\n        const storyPath = runner.suite.file;\n\n        const [outputPath, outputFilename] = splitPath(storyPath,\n            opts.storyDir, opts.outputDir);\n\n        // Handle console output if requested, pass through to Spec reporter.\n        if (opts.console) {\n            specReporter(runner, options);\n        }\n\n        // Take screenshots of failed tests if requested\n        if (opts.screenshot) {\n            runner.on('fail', test => {\n                screenshot(test, opts.screenshotDir);\n            });\n        }\n\n        // Handle JSON output\n\n        runner.on('suite', suite => {\n            curSuite = new classes_suite(suite, curSuite);\n            curSuite.start();\n        });\n\n        runner.on('suite end', () => {\n            curSuite.stop();\n\n            if (curSuite.parent) {\n                curSuite.parent.addSuite(curSuite);\n                curSuite = curSuite.parent;\n            }\n        });\n\n        runner.on('pending', test => {\n            curSuite.addTest(new classes_test(test, classes_test.TEST_PENDING));\n        });\n\n        runner.on('pass', test => {\n            curSuite.addTest(new classes_test(test, classes_test.TEST_PASS));\n        });\n\n        runner.on('fail', (test, err) => {\n            curSuite.addTest(new classes_test(test, classes_test.TEST_FAIL, err));\n        });\n\n        runner.on('end', () => {\n            curSuite.stop(); // End the current suite again.\n\n            let jsonFilename = outputFilename.replace('.js', '.json');\n\n            let stream = index__fs.createWriteStream(outputPath + '/' + jsonFilename);\n            stream.write(JSON.stringify(curSuite, null, 2));\n            stream.end();\n        });\n    }\n\n    var index = Spec;\n\n    return index;\n\n}));\n","const fs = require('fs-extra');\n\n/**\n * Takes a screenshot of a failed test and returns the relative path\n * to that screenshot.  Note that this expects a browser object for protractor\n * and naively assumes that the screenshots directory exists.\n *\n * @param {Object} test\n * @return \"String\" screenshotPath\n * @api private\n */\n\nexport function screenshot(test, dir) {\n    let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n    let screenshotPath = `${dir}/${filename}`;\n\n    /*global browser*/\n    browser.takeScreenshot().then(png => {\n        let stream = fs.createWriteStream(screenshotPath);\n\n        stream.write(new Buffer(png, 'base64'));\n        stream.end();\n    });\n\n    return screenshotPath;\n}\n\n/**\n * Starting from haystack in the path, clear everything up to and including\n * the search string, then prepend the replace string, and return a path and\n * a filename\n *\n * @param \"String\" haystack\n * @param \"String\" search\n * @param \"String\" replace\n * @return \"String\",\"String\" relativePath, filename\n * @api private\n */\n\nexport function splitPath(haystack, search, replace) {\n    let relative = replace + haystack.split(search)[1];\n    let tokens = relative.split('/');\n    let filename = tokens.pop();\n    let path = tokens.join('/');\n\n    return [path, filename];\n}\n","const fs = require('fs-extra');\n\n/**\n * Module dependencies.\n */\nconst specReporter = require('mocha').reporters.Spec;\n\nimport {screenshot, splitPath} from './util';\nimport Suite from './classes/suite';\nimport Test from './classes/test';\n\n/**\n * Default values\n */\nconst defaults = {\n    screenshotDir: 'test/screenshot',\n    outputDir: 'test/output',\n    storyDir: 'test/stories'\n};\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\nfunction Spec(runner, options) {\n    const opts = options.reporterOptions || {};\n\n    // Handle options and setup defaults\n    opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n    opts.outputDir = opts.outputDir || defaults.outputDir;\n    opts.storyDir = opts.storyDir || defaults.storyDir;\n\n    let curSuite = null;\n\n    const storyPath = runner.suite.file;\n\n    const [outputPath, outputFilename] = splitPath(storyPath,\n        opts.storyDir, opts.outputDir);\n\n    // Handle console output if requested, pass through to Spec reporter.\n    if (opts.console) {\n        specReporter(runner, options);\n    }\n\n    // Take screenshots of failed tests if requested\n    if (opts.screenshot) {\n        runner.on('fail', test => {\n            screenshot(test, opts.screenshotDir);\n        });\n    }\n\n    // Handle JSON output\n\n    runner.on('suite', suite => {\n        curSuite = new Suite(suite, curSuite);\n        curSuite.start();\n    });\n\n    runner.on('suite end', () => {\n        curSuite.stop();\n\n        if (curSuite.parent) {\n            curSuite.parent.addSuite(curSuite);\n            curSuite = curSuite.parent;\n        }\n    });\n\n    runner.on('pending', test => {\n        curSuite.addTest(new Test(test, Test.TEST_PENDING));\n    });\n\n    runner.on('pass', test => {\n        curSuite.addTest(new Test(test, Test.TEST_PASS));\n    });\n\n    runner.on('fail', (test, err) => {\n        curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n    });\n\n    runner.on('end', () => {\n        curSuite.stop(); // End the current suite again.\n\n        let jsonFilename = outputFilename.replace('.js', '.json');\n\n        let stream = fs.createWriteStream(outputPath + '/' + jsonFilename);\n        stream.write(JSON.stringify(curSuite, null, 2));\n        stream.end();\n    });\n}\n\nexport default Spec;\n","class Stats {\n    constructor(tests = 0, pending = 0, failures = 0, duration = 0) {\n        this.tests = tests;\n        this.pending = pending;\n        this.failures = failures;\n        this.duration = duration;\n        this.timeStart = null;\n        this.timeStop = null;\n    }\n    add(stats) {\n        this.tests += stats.tests;\n        this.pending += stats.pending;\n        this.failures += stats.failures;\n    }\n}\n\nexport default Stats;\n","class Test {\n    constructor(test, status, err) {\n        this.status = status;\n        this.title = test.title;\n        this.fullTitle = test.fullTitle();\n        this.duration = Math.round(test.duration / 10) / 100;\n        this.error = null;\n\n        if(err) {\n            this.error = {};\n            Object.getOwnPropertyNames(err).forEach(key => {\n                this.error[key] = err[key];\n            });\n        }\n    };\n}\n\nTest.TEST_PENDING = 2;\nTest.TEST_PASS = 1;\nTest.TEST_FAIL = 0;\n\nexport default Test;\n","import Stats from './stats';\nimport Test from './test';\n\nclass Suite {\n    constructor(suite, parent) {\n        this.title = suite.title;\n        this.suites = [];\n        this.tests = [];\n        this.parent = parent;\n        this.stats = new Stats();\n    }\n    addStats(stats) {\n        this.stats.add(stats);\n    }\n    addSuite(suite) {\n        if (!suite.hasTests()) {\n            return false;\n        }\n        this.suites.push(suite);\n        this.addStats(suite.stats);\n    }\n    addTest(test) {\n        this.tests.push(test);\n        this.stats.tests++;\n\n        if (test.status === Test.TEST_PENDING) {\n            this.stats.pending++;\n        }\n        else if (test.status === Test.TEST_FAIL) {\n            this.stats.failures++;\n        }\n    }\n    hasTests() {\n        return (this.tests.length > 0);\n    }\n    start () {\n        this.stats.timeStart = Date.now();\n    }\n    stop () {\n        if(!this.stats.timeStart > 0) {\n            return false;\n        }\n        this.stats.timeStop = Date.now();\n        this.stats.duration = Math.round((this.stats.timeStop - this.stats.timeStart) / 10) / 100;\n    }\n    toJSON() {\n        var clone = Object.assign({}, this);\n        clone.parent = undefined;\n        return clone;\n    }\n}\n\nexport default Suite;\n"],"sourceRoot":"/source/"}