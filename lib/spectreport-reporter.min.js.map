{"version":3,"sources":["spectreport-reporter.min.js","spectreport-reporter.js","src/util.js","src/classes/stats.js","src/classes/test.js","src/classes/suite.js","src/index.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_step","_arr","_iterator","next","done","push","value","length","TypeError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","__proto__","_createClass","defineProperties","target","props","key","prop","Constructor","protoProps","staticProps","_classCallCheck","instance","global","factory","exports","module","define","amd","spectreportReporter","this","screenshot","test","dir","filename","parent","title","replace","screenshotPath","browser","takeScreenshot","then","png","stream","util__fs","createOuputStream","write","Buffer","end","splitPath","haystack","search","searchPath","path","resolve","relative","fullPath","dirname","basename","require","Stats","tests","undefined","arguments","pending","failures","duration","timeStart","timeStop","add","stats","classes_stats","Test","status","err","_this","fullTitle","Math","round","error","getOwnPropertyNames","forEach","TEST_PENDING","TEST_PASS","TEST_FAIL","classes_test","Suite","suite","suites","addStats","addSuite","hasTests","addTest","start","Date","now","stop","toJSON","copy","_iteratorNormalCompletion","_didIteratorError","_iteratorError","keys","classes_suite","index__fs","mocha","Spec","reporters","Base","defaults","screenshotDir","outputDir","storyDir","SpectReporter","_Base","runner","options","opts","reporterOptions","curSuite","console","call","on","storyPath","file","_splitPath","_splitPath2","outputPath","outputFilename","_parent","jsonFilename","outputJsonSync","index"],"mappings":"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","file":"spectreport-reporter.min.js","sourcesContent":[null,"(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.spectreportReporter = factory()\n}(this, function () { 'use strict';\n\n    const util__fs = require('fs-extra');\n    const path = require('path');\n\n    /**\n     * Takes a screenshot of a failed test and returns the relative path\n     * to that screenshot.  Note that this expects a browser object for protractor\n     * and naively assumes that the screenshots directory exists.\n     *\n     * @param {Object} test\n     * @return \"String\" screenshotPath\n     * @api private\n     */\n\n    function screenshot(test, dir) {\n        let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n        let screenshotPath = `${dir}/${filename}`;\n\n        /*global browser*/\n        browser.takeScreenshot().then(png => {\n            let stream = util__fs.createOuputStream(screenshotPath);\n\n            stream.write(new Buffer(png, 'base64'));\n            stream.end();\n        });\n\n        return screenshotPath;\n    }\n\n    /**\n     * For haystack underneath the search directory\n     *\n     * @param \"String\" haystack\n     * @param \"String\" search\n     * @param \"String\" replace\n     * @return \"String\",\"String\" relativePath, filename\n     * @api private\n     */\n\n    function splitPath(haystack, search, replace) {\n        var searchPath = path.resolve(search);\n        var relative = path.relative(searchPath, haystack);\n        var fullPath = path.resolve(replace, relative);\n\n        return [path.dirname(fullPath), path.basename(fullPath)];\n    }\n\n    class Stats {\n        constructor(tests = 0, pending = 0, failures = 0, duration = 0) {\n            this.tests = tests;\n            this.pending = pending;\n            this.failures = failures;\n            this.duration = duration;\n            this.timeStart = null;\n            this.timeStop = null;\n        }\n        add(stats) {\n            this.tests += stats.tests;\n            this.pending += stats.pending;\n            this.failures += stats.failures;\n        }\n    }\n\n    var classes_stats = Stats;\n\n    class Test {\n        constructor(test, status, err) {\n            this.status = status;\n            this.title = test.title;\n            this.fullTitle = test.fullTitle();\n            this.duration = Math.round(test.duration / 10) / 100;\n            this.error = null;\n\n            if(err) {\n                this.error = {};\n                Object.getOwnPropertyNames(err).forEach(key => {\n                    this.error[key] = err[key];\n                });\n            }\n        };\n    }\n\n    Test.TEST_PENDING = 2;\n    Test.TEST_PASS = 1;\n    Test.TEST_FAIL = 0;\n\n    var classes_test = Test;\n\n    class Suite {\n        constructor(suite, parent) {\n            this.title = suite.title;\n            this.suites = [];\n            this.tests = [];\n            this.parent = parent;\n            this.stats = new classes_stats();\n        }\n        addStats(stats) {\n            this.stats.add(stats);\n        }\n        addSuite(suite) {\n            if (!suite.hasTests()) {\n                return false;\n            }\n            this.suites.push(suite);\n            this.addStats(suite.stats);\n        }\n        addTest(test) {\n            this.tests.push(test);\n            this.stats.tests++;\n\n            if (test.status === classes_test.TEST_PENDING) {\n                this.stats.pending++;\n            }\n            else if (test.status === classes_test.TEST_FAIL) {\n                this.stats.failures++;\n            }\n        }\n        hasTests() {\n            return (this.stats.tests > 0);\n        }\n        start () {\n            this.stats.timeStart = Date.now();\n        }\n        stop () {\n            if(!this.stats.timeStart > 0) {\n                return false;\n            }\n            this.stats.timeStop = Date.now();\n            this.stats.duration = Math.round((this.stats.timeStop - this.stats.timeStart) / 10) / 100;\n        }\n        toJSON() {\n            // Generate a clean, shallow copy without the parent\n            var copy = {};\n\n            for (let key of Object.keys(this)) {\n                copy[key] = this[key];\n            }\n            copy.parent = undefined;\n\n            return copy;\n        }\n    }\n\n    var classes_suite = Suite;\n\n    const index__fs = require('fs-extra');\n\n    /**\n     * Module dependencies.\n     */\n    const mocha = require('mocha');\n    const Spec = mocha.reporters.Spec;\n    const Base = mocha.reporters.Base;\n\n    const defaults = {\n        screenshotDir: 'test/screenshot',\n        outputDir: 'test/output',\n        storyDir: 'test/stories'\n    };\n\n    /**\n     * Initialize a new `Spec` test reporter.\n     *\n     * @param {Runner} runner\n     * @api public\n     */\n    class SpectReporter extends Base {\n        constructor(runner, options) {\n            const opts = options.reporterOptions || {};\n\n            // Handle options and setup defaults\n            opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n            opts.outputDir = opts.outputDir || defaults.outputDir;\n            opts.storyDir = opts.storyDir || defaults.storyDir;\n\n            let curSuite = null;\n\n            // Handle console output if requested, pass through to Spec reporter.\n            if (opts.console) {\n                Spec.call(this, runner);\n            }\n\n            // Take screenshots of failed tests if requested\n            if (opts.screenshot) {\n                runner.on('fail', test => {\n                    screenshot(test, opts.screenshotDir);\n                });\n            }\n\n            // Find the path for the output file, accomodate multi-suite sets.\n            const storyPath = runner.suite.file || runner.suite.suites[0].file;\n\n            const [outputPath, outputFilename] = splitPath(storyPath,\n                opts.storyDir, opts.outputDir);\n\n            // Handle JSON output\n\n            runner.on('suite', suite => {\n                // In the case of protractor, skip the blank titled root suite.\n                if (suite.title === '' && suite.suites.length === 1) {\n                    return false;\n                }\n                curSuite = new classes_suite(suite, curSuite);\n                curSuite.start();\n            });\n\n            runner.on('suite end', () => {\n                curSuite.stop();\n\n                if (curSuite.parent) {\n                    let parent = curSuite.parent;\n                    parent.addSuite(curSuite);\n                    curSuite = parent;\n                }\n            });\n\n            runner.on('pending', test => {\n                curSuite.addTest(new classes_test(test, classes_test.TEST_PENDING));\n            });\n\n            runner.on('pass', test => {\n                curSuite.addTest(new classes_test(test, classes_test.TEST_PASS));\n            });\n\n            runner.on('fail', (test, err) => {\n                curSuite.addTest(new classes_test(test, classes_test.TEST_FAIL, err));\n            });\n\n            runner.on('end', () => {\n                curSuite.stop(); // End the current suite again.\n\n                let jsonFilename = outputFilename.replace('.js', '.json');\n                index__fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n            });\n        }\n    }\n\n    var index = SpectReporter;\n\n    return index;\n\n}));\n","const fs = require('fs-extra');\nconst path = require('path');\n\n/**\n * Takes a screenshot of a failed test and returns the relative path\n * to that screenshot.  Note that this expects a browser object for protractor\n * and naively assumes that the screenshots directory exists.\n *\n * @param {Object} test\n * @return \"String\" screenshotPath\n * @api private\n */\n\nexport function screenshot(test, dir) {\n    let filename = (test.parent.title + ' ' + test.title).replace(/\\W+/g, '_') + '.png';\n    let screenshotPath = `${dir}/${filename}`;\n\n    /*global browser*/\n    browser.takeScreenshot().then(png => {\n        let stream = fs.createOuputStream(screenshotPath);\n\n        stream.write(new Buffer(png, 'base64'));\n        stream.end();\n    });\n\n    return screenshotPath;\n}\n\n/**\n * For haystack underneath the search directory\n *\n * @param \"String\" haystack\n * @param \"String\" search\n * @param \"String\" replace\n * @return \"String\",\"String\" relativePath, filename\n * @api private\n */\n\nexport function splitPath(haystack, search, replace) {\n    var searchPath = path.resolve(search);\n    var relative = path.relative(searchPath, haystack);\n    var fullPath = path.resolve(replace, relative);\n\n    return [path.dirname(fullPath), path.basename(fullPath)];\n}\n","class Stats {\n    constructor(tests = 0, pending = 0, failures = 0, duration = 0) {\n        this.tests = tests;\n        this.pending = pending;\n        this.failures = failures;\n        this.duration = duration;\n        this.timeStart = null;\n        this.timeStop = null;\n    }\n    add(stats) {\n        this.tests += stats.tests;\n        this.pending += stats.pending;\n        this.failures += stats.failures;\n    }\n}\n\nexport default Stats;\n","class Test {\n    constructor(test, status, err) {\n        this.status = status;\n        this.title = test.title;\n        this.fullTitle = test.fullTitle();\n        this.duration = Math.round(test.duration / 10) / 100;\n        this.error = null;\n\n        if(err) {\n            this.error = {};\n            Object.getOwnPropertyNames(err).forEach(key => {\n                this.error[key] = err[key];\n            });\n        }\n    };\n}\n\nTest.TEST_PENDING = 2;\nTest.TEST_PASS = 1;\nTest.TEST_FAIL = 0;\n\nexport default Test;\n","import Stats from './stats';\nimport Test from './test';\n\nclass Suite {\n    constructor(suite, parent) {\n        this.title = suite.title;\n        this.suites = [];\n        this.tests = [];\n        this.parent = parent;\n        this.stats = new Stats();\n    }\n    addStats(stats) {\n        this.stats.add(stats);\n    }\n    addSuite(suite) {\n        if (!suite.hasTests()) {\n            return false;\n        }\n        this.suites.push(suite);\n        this.addStats(suite.stats);\n    }\n    addTest(test) {\n        this.tests.push(test);\n        this.stats.tests++;\n\n        if (test.status === Test.TEST_PENDING) {\n            this.stats.pending++;\n        }\n        else if (test.status === Test.TEST_FAIL) {\n            this.stats.failures++;\n        }\n    }\n    hasTests() {\n        return (this.stats.tests > 0);\n    }\n    start () {\n        this.stats.timeStart = Date.now();\n    }\n    stop () {\n        if(!this.stats.timeStart > 0) {\n            return false;\n        }\n        this.stats.timeStop = Date.now();\n        this.stats.duration = Math.round((this.stats.timeStop - this.stats.timeStart) / 10) / 100;\n    }\n    toJSON() {\n        // Generate a clean, shallow copy without the parent\n        var copy = {};\n\n        for (let key of Object.keys(this)) {\n            copy[key] = this[key];\n        }\n        copy.parent = undefined;\n\n        return copy;\n    }\n}\n\nexport default Suite;\n","const fs = require('fs-extra');\n\n/**\n * Module dependencies.\n */\nconst mocha = require('mocha');\nconst Spec = mocha.reporters.Spec;\nconst Base = mocha.reporters.Base;\n\nimport {screenshot, splitPath} from './util';\nimport Suite from './classes/suite';\nimport Test from './classes/test';\n\n/**\n * Default values\n */\nconst defaults = {\n    screenshotDir: 'test/screenshot',\n    outputDir: 'test/output',\n    storyDir: 'test/stories'\n};\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\nclass SpectReporter extends Base {\n    constructor(runner, options) {\n        const opts = options.reporterOptions || {};\n\n        // Handle options and setup defaults\n        opts.screenshotDir = opts.screenshotDir || defaults.screenshotDir;\n        opts.outputDir = opts.outputDir || defaults.outputDir;\n        opts.storyDir = opts.storyDir || defaults.storyDir;\n\n        let curSuite = null;\n\n        // Handle console output if requested, pass through to Spec reporter.\n        if (opts.console) {\n            Spec.call(this, runner);\n        }\n\n        // Take screenshots of failed tests if requested\n        if (opts.screenshot) {\n            runner.on('fail', test => {\n                screenshot(test, opts.screenshotDir);\n            });\n        }\n\n        // Find the path for the output file, accomodate multi-suite sets.\n        const storyPath = runner.suite.file || runner.suite.suites[0].file;\n\n        const [outputPath, outputFilename] = splitPath(storyPath,\n            opts.storyDir, opts.outputDir);\n\n        // Handle JSON output\n\n        runner.on('suite', suite => {\n            // In the case of protractor, skip the blank titled root suite.\n            if (suite.title === '' && suite.suites.length === 1) {\n                return false;\n            }\n            curSuite = new Suite(suite, curSuite);\n            curSuite.start();\n        });\n\n        runner.on('suite end', () => {\n            curSuite.stop();\n\n            if (curSuite.parent) {\n                let parent = curSuite.parent;\n                parent.addSuite(curSuite);\n                curSuite = parent;\n            }\n        });\n\n        runner.on('pending', test => {\n            curSuite.addTest(new Test(test, Test.TEST_PENDING));\n        });\n\n        runner.on('pass', test => {\n            curSuite.addTest(new Test(test, Test.TEST_PASS));\n        });\n\n        runner.on('fail', (test, err) => {\n            curSuite.addTest(new Test(test, Test.TEST_FAIL, err));\n        });\n\n        runner.on('end', () => {\n            curSuite.stop(); // End the current suite again.\n\n            let jsonFilename = outputFilename.replace('.js', '.json');\n            fs.outputJsonSync(outputPath + '/' + jsonFilename, curSuite);\n        });\n    }\n}\n\nexport default SpectReporter;\n"],"sourceRoot":"/source/"}